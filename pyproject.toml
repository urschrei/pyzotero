[project]
name = "pyzotero"
dynamic = ["version", "readme"]
description = "Python wrapper for the Zotero API"
requires-python = ">=3.9"
dependencies = [
    "feedparser >= 6.0.11",
    "bibtexparser",
    "httpx>=0.28.1",
    "whenever>=0.8.8",
]
authors = [{ name = "Stephan HÃ¼gel", email = "urschrei@gmail.com" }]
license = {file = "LICENSE.md"}
keywords = ["Zotero", "DH"]
classifiers = [
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Education",
    "License :: OSI Approved :: Blue Oak Model License (BlueOak-1.0.0)",
    "Operating System :: OS Independent",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
[project.urls]
Repository = "https://github.com/urschrei/pyzotero"
Tracker = "https://github.com/urschrei/pyzotero/issues"
documentation = "https://pyzotero.readthedocs.org"

[project.optional-dependencies]
test = [
    "pytest >= 7.4.2",
    "pytz>=2025.2",
    "httpretty",
    "python-dateutil",
    "ipython",
    "pytest-asyncio",
    "pytest-cov>=6.0.0",
]

[tool.setuptools.dynamic]
readme = {file = "README.md", content-type = "text/markdown"}

[build-system]
build-backend = "setuptools.build_meta"
requires = [
    "setuptools >= 45",
    "setuptools-scm[toml] >= 6.2",
]

[tool.pytest.ini_options]
minversion = "6.2.2"
addopts = [
    "--import-mode=importlib", "--cov=pyzotero", "--cov-report=xml",
]
testpaths = [
    "tests",
]
asyncio_mode = "strict"
asyncio_default_fixture_loop_scope = "function"

[tool.setuptools_scm]
write_to = "src/_version.py"

[tool.ruff]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

[tool.ruff.lint]
select = ["F", "E", "W", "N", "D4", "UP", "PL", "TRY", "PERF", "FURB", "RUF", "S", "DTZ"]
ignore = ["ANN001", "ANN003", "ANN202", "ANN201", "DOC201", "E501", "PLR0904", "PLR0913", "PLR0917", "SLF001", "FIX002", "D400", "D415"]
fixable = ["ALL"]
unfixable = []

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"
